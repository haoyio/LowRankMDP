function value = value_iteration(S, A)
    % initialize
    nstate = length(S);
    naction = length(A);
    npair = nstate * naction;
    value = zeros(nstate, naction);
    residual = Inf;
    
    % precompute state transitions
    fprintf('\nComputing state transitions...');
    tic();
    Snext = zeros(npair, const.DSTATE);
    for ipair = 1:npair
        [istate, iaction] = ind2sub([nstate, naction], ipair);
        Snext(ipair, :) = transition(S(istate, :), A(iaction));
    end % for ipair
    fprintf('done in %.2e\n', toc());
    
    fprintf('\nComputing next state indices for transition dictionary...');
    tic();
    ind_Snext = dsearchn(S, delaunayn(S), Snext);
    fprintf('done in %.2e\n', toc());
    
    fprintf('\nBeginning value iteration...\n');
    tic();
    while residual > const.VTOL
        residual = 0;
        for ipair = 1:npair
            [istate, iaction] = ind2sub([nstate, naction], ipair);
            inext = ind2sub([nstate, naction], ind_Snext(ipair));
            
            value_prev = value(istate, iaction);
            value(istate, iaction) = ...
                reward(next_state) + const.GAMMA * value(inext, iaction);
            residual = residual + (value - value_prev)^2;
        end % for ipair
        fprintf
    end % while
    fprintf('Value iteration took %.2e sec\n', toc());
end % function